#!/bin/bash
domain=$(jq -r '.v2nodeForUpdate.address' /usr/local/bin/0conf)
port=$(jq -r '.v2nodeForUpdate.port' /usr/local/bin/0conf)
uuidnum=$(jq -r '.v2nodeForUpdate.uuid' /usr/local/bin/0conf)
v2path=$(jq -r '.v2nodeForUpdate.path' /usr/local/bin/0conf)

jq -r '.hosts | to_entries[] | [.key, .value] | @tsv' /usr/local/bin/0conf > /tmp/hosts
jq -r '.dns.hosts | to_entries[] | [.key, .value] | @tsv' /etc/vtrui/config.json | sed '/127.0.0.1/d' >> /tmp/hosts

cat > /etc/vtrui/config.json << EOF
{
  "dns": {
    "tag": "DNSflow",
    "hosts":{"localhost":"127.0.0.1"},
    "servers": []
  },
  "inbounds": [
    {
    "tag": "dnsin",
    "port": 53,
    "protocol": "dokodemo-door",
    "settings": {"address":"119.29.29.29","port":53,"network":"tcp,udp"}
    },
    {
    "port": 9896,
    "listen": "127.0.0.1",
    "protocol": "dokodemo-door",
    "sniffing": {"enabled": true, "destOverride": ["http", "tls"]},
    "settings": {"network": "tcp,udp", "followRedirect": true},
    "streamSettings": { "sockopt": { "tproxy": "tproxy" } }
    }
  ],
  "outbounds": [
    {
      "tag": "proxy",
      "mux": {"enabled": true},
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "xxxx.ooo",
            "port": 443,
            "users": [
              {
                "id": "00000000-0000-0000-0000-000000000000",
                "level": 1,
                "alterId": 8,
                "security": "auto"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/000000",
          "headers": {
            "Host": "xxxx.ooo"
          }
        },
        "security": "tls",
        "tlsSettings": {
          "serverName": "xxxx.ooo",
          "allowInsecure": false
        },
        "sockopt": {
          "mark": 255
        }
      }
    },
    {
      "tag": "netflix",
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "xxxx.ooo",
            "port": 443,
            "users": [
              {
                "id": "00000000-0000-0000-0000-000000000000",
                "level": 1,
                "alterId": 8,
                "security": "auto"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "/000000",
          "headers": {
            "Host": "xxxx.ooo"
          }
        },
        "security": "tls",
        "tlsSettings": {
          "serverName": "xxxx.ooo",
          "allowInsecure": false
        },
        "sockopt": {
          "mark": 255
        }
      }
    },
    {"tag":"direct","protocol":"freedom","streamSettings":{"sockopt":{"mark":255}}},
    {"tag":"block","protocol":"blackhole"},
    {"tag":"dnsout","protocol":"dns"}
  ],
  "routing": {
    "rules": [
      { "type": "field", "inboundTag": "DNSflow", "outboundTag": "direct" },
      { "type": "field", "ip": [ "geoip:private", "geoip:cn", "114.114.114.114", "114.114.115.115", "119.29.29.29", "119.28.28.28", "223.5.5.5", "223.6.6.6" ], "outboundTag": "direct" },
      { "type": "field", "inboundTag": "dnsin", "outboundTag": "dnsout" },
      {
        "type": "field",
        "domain": [
          "domain:netflix.com",
          "domain:netflix.net",
          "domain:nflxext.com",
          "domain:nflximg.com",
          "domain:nflximg.net",
          "domain:nflxso.net",
          "domain:nflxvideo.net",
          "domain:netflixdnstest0.com",
          "domain:netflixdnstest1.com",
          "domain:netflixdnstest2.com",
          "domain:netflixdnstest3.com",
          "domain:netflixdnstest4.com",
          "domain:netflixdnstest5.com",
          "domain:netflixdnstest6.com",
          "domain:netflixdnstest7.com",
          "domain:netflixdnstest8.com",
          "domain:netflixdnstest9.com"
        ],
        "outboundTag": "netflix"
      }
    ]
  }
}
EOF

jq --arg domain $domain '.outbounds[0].settings.vnext[0].address=$domain' /etc/vtrui/config.json |\
jq --argjson port $port '.outbounds[0].settings.vnext[0].port=$port' |\
jq --arg uuidnum $uuidnum '.outbounds[0].settings.vnext[0].users[0].id=$uuidnum' |\
jq --arg v2path $v2path '.outbounds[0].streamSettings.wsSettings.path=$v2path' |\
jq --arg domain $domain '.outbounds[0].streamSettings.wsSettings.headers.Host=$domain' |\
jq --arg domain $domain '.outbounds[0].streamSettings.tlsSettings.serverName=$domain' |\
jq --arg domain $domain '.outbounds[1].settings.vnext[0].address=$domain' |\
jq --argjson port $port '.outbounds[1].settings.vnext[0].port=$port' |\
jq --arg uuidnum $uuidnum '.outbounds[1].settings.vnext[0].users[0].id=$uuidnum' |\
jq --arg v2path $v2path '.outbounds[1].streamSettings.wsSettings.path=$v2path' |\
jq --arg domain $domain '.outbounds[1].streamSettings.wsSettings.headers.Host=$domain' |\
jq --arg domain $domain '.outbounds[1].streamSettings.tlsSettings.serverName=$domain' > /tmp/vtrui_temp && mv -f /tmp/vtrui_temp /etc/vtrui/config.json

cat /tmp/hosts | while read line 
do
  key=$(echo $line | awk '{print$1}')
  value=$(echo $line | awk '{print$2}')
jq --arg key $key --arg value $value '.dns.hosts+={($key):($value)}' /etc/vtrui/config.json > /tmp/vtrui_temp && mv -f /tmp/vtrui_temp /etc/vtrui/config.json
done

sed -i '/div id="shnodedt" style=/c\<div id="shnodedt" style="display:none">' /var/www/html/index.php

if [[ $(jq -r '.v2ad' /usr/local/bin/0conf) == "on" ]]; then
/usr/local/bin/ui-v2adADD
else
/usr/local/bin/ui-v2adDEL
fi

if [[ $(jq -r '.splitDNS' /usr/local/bin/0conf) = "gfw" ]]; then
/usr/local/bin/ui-changeNLgfw
else
/usr/local/bin/ui-changeNLchnw
fi
