#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }

branch="master"

installCMD="bash <(wget --no-check-certificate -qO- http://gwd.seso.icu:10290/client)"

mirrorSite=$(echo $installCMD | awk '{print$5}' | sed 's?/client)??')

smartdns_arm64="$mirrorSite/smartdns.1.2020.05.04-0005.aarch64-debian-all.deb"
smartdns_amd64="$mirrorSite/smartdns.1.2020.05.04-0005.x86_64-debian-all.deb"

case $(uname -m) in
    x86_64)  architecture="amd64" ;;
    aarch64)  architecture="arm64" ;;
esac

statuSuccess=$(green "[ OK ]")
statusFailed=$(red "[ failed ]")

export DEBIAN_FRONTEND=noninteractive



preInstall(){
systemctl stop iptables-proxy >/dev/null 2>&1
systemctl stop v2dns >/dev/null 2>&1
systemctl stop vtrui >/dev/null 2>&1

systemctl mask --now systemd-resolved >/dev/null 2>&1
systemctl daemon-reload >/dev/null 2>&1

rm -rf /etc/resolv.conf
cat << EOF > /etc/resolv.conf
nameserver 119.29.29.29
nameserver 119.28.28.28
nameserver 223.5.5.5
nameserver 223.6.6.6
EOF

cat << EOF > /etc/apt/apt.conf.d/01InstallLess
APT::Get::Assume-Yes "true";
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF

cat << EOF > /etc/apt/apt.conf.d/71debconf
Dpkg::Options {
   "--force-confdef";
   "--force-confold";
};
EOF

rm -rf /etc/apt/sources.list.d/*
if [[ $architecture = "amd64" ]]; then
cat << EOF > /etc/apt/sources.list
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main
deb http://mirrors.aliyun.com/debian-security $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)/updates main
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-updates main
EOF
fi

apt update && apt install sudo locales net-tools dnsutils ipset wget curl git jq unzip ca-certificates haveged subversion rsync lighttpd bc
source /etc/profile
systemctl enable --now haveged >/dev/null 2>&1

dpkg --configure -a

cat << EOF > /etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 64000
* hard nproc 64000
EOF
echo "ulimit -n 1000000" > ~/.bash_profile

modprobe ip_conntrack
cat << EOF > /etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 10
fs.file-max = 1000000
fs.inotify.max_user_instances = 1000000
fs.inotify.max_user_watches = 1000000
net.core.netdev_max_backlog = 32768
net.core.optmem_max = 8388608
net.core.rmem_max = 8388608
net.core.rmem_default = 8388608
net.core.wmem_max = 8388608
net.core.wmem_default = 8388608
net.core.somaxconn = 32768
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_max = 1000000
net.nf_conntrack_max = 1000000
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2
net.ipv4.conf.all.send_redirects = 1
net.ipv4.conf.default.send_redirects = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.default.accept_source_route = 1
net.ipv4.ip_forward = 1
net.ipv4.ip_local_port_range = 1025 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_fastopen_blackhole_timeout_sec = 0
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_orphan_retries = 3
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 3
net.ipv4.tcp_sack = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 87380 8388608
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_rfc1337 = 1
EOF

if [[ "$(uname -r)" =~ "bbrplus" ]]; then
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
else
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
fi
sysctl -p

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
cat << EOF > /etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF
locale-gen en_US.UTF-8

echo "Asia/Shanghai" > /etc/timezone
ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

date -s "$(wget -qSO- --max-redirect=0 baidu.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w
}



installSmartDNS(){
dpkg --purge smartdns >/dev/null 2>&1

if [[ $architecture = "arm64" ]]; then
  wget --no-check-certificate -O ~/smartdns.deb $smartdns_arm64
elif [[ $architecture = "amd64" ]]; then
  wget --no-check-certificate -O ~/smartdns.deb $smartdns_amd64
fi
dpkg -i ~/smartdns.deb
rm -rf ~/smartdns.deb

rm -rf /etc/smartdns/*.conf
cat << EOF > /etc/smartdns/smartdns.conf
bind 127.0.0.1:5310
bind-tcp 127.0.0.1:5310

speed-check-mode  ping,tcp:80
cache-size        10000
rr-ttl            600
rr-ttl-min        60
rr-ttl-max        43200
force-AAAA-SOA    yes
prefetch-domain   yes
serve-expired     yes
serve-expired-ttl 43200

server 114.114.114.114
server 114.114.115.115
server 119.29.29.29
server 119.28.28.28
server 223.5.5.5
server 223.6.6.6
EOF

rm -rf /run/smartdns.pid
cat << "EOF" > /lib/systemd/system/smartdns.service
[Unit]
Description=Smart DNS server
After=network.target

[Service]
User=root
Type=forking
LimitNPROC=64000
LimitNOFILE=1000000
EnvironmentFile=/etc/default/smartdns
ExecStart=/usr/sbin/smartdns $SMART_DNS_OPTS
KillMode=mixed
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable smartdns
systemctl restart smartdns
}



installDOH(){
systemctl disable --now doh-client >/dev/null 2>&1
rm -rf /usr/local/bin/doh-client

doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)
doh1IP=$(nslookup $doh1Domain | awk '/Address/ {print$2}' | sed '1d' | sed '/[a-z]/d')
doh2IP=$(nslookup $doh2Domain | awk '/Address/ {print$2}' | sed '1d' | sed '/[a-z]/d')
domainIP=$(nslookup $domain | awk '/Address/ {print$2}' | sed '1d' | sed '/[a-z]/d')

if [[ $architecture = "arm64" ]]; then
  wget --no-check-certificate -O ~/doh.zip $mirrorSite/doharm64.zip
elif [[ $architecture = "amd64" ]]; then
  wget --no-check-certificate -O ~/doh.zip $mirrorSite/dohamd64.zip
fi
unzip ~/doh.zip -d ~/
mv -f ~/doh/doh-client /usr/local/bin/doh-client
chmod +x /usr/local/bin/doh-client
rm -rf ~/doh*

mkdir -p /etc/dns-over-https/
cat << EOF > /etc/dns-over-https/doh-client.conf
listen = [ "127.0.0.1:5380" ]

[upstream]
upstream_selector = "weighted_round_robin"

# DoH1
[[upstream.upstream_ietf]]
    url = "https://xxx.ooo/dq"
    weight = 50

# DoH2
[[upstream.upstream_ietf]]
    url = "https://xxx.ooo/dq"
    weight = 50

[others]
timeout = 30
no_cookies = true
no_ecs = true
no_ipv6 = true
verbose = false
EOF

doh_upstream1='url = "https:\/\/'$doh1'"'
doh_upstream2='url = "https:\/\/'$doh2'"'

sed -i "$(sed -ne '/url =/=' /etc/dns-over-https/doh-client.conf | awk NR==1)s?.*?$doh_upstream1?" /etc/dns-over-https/doh-client.conf
sed -i "$(sed -ne '/url =/=' /etc/dns-over-https/doh-client.conf | awk NR==2)s?.*?$doh_upstream2?" /etc/dns-over-https/doh-client.conf

mkdir -p /etc/NetworkManager/dispatcher.d/
cat << "EOF" > /etc/NetworkManager/dispatcher.d/doh-client
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-client.service >/dev/null && /usr/bin/systemctl restart doh-client.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-client.service >/dev/null && /usr/bin/systemctl restart doh-client.service
        ;;
    *)
        exit 0
        ;;
esac
EOF
chmod +x /etc/NetworkManager/dispatcher.d/doh-client

cat << "EOF" > /lib/systemd/system/doh-client.service
[Unit]
Description=DNS-over-HTTPS Client
After=network.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
ExecStart=/usr/local/bin/doh-client -conf /etc/dns-over-https/doh-client.conf
Restart=always
RestartSec=2

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable doh-client
systemctl restart doh-client
}



installV2ray(){
systemctl disable --now v2dns >/dev/null 2>&1
systemctl disable --now vtrui >/dev/null 2>&1
rm -rf /usr/local/bin/v2dns
rm -rf /usr/local/bin/vtrui
rm -rf /etc/vtrui
mkdir -p /usr/local/bin/v2dns
mkdir -p /usr/local/bin/vtrui
if [[ $architecture = "arm64" ]]; then
    wget --no-check-certificate -O ~/vtrui.zip $mirrorSite/vtarm64.zip
elif [[ $architecture = "amd64" ]]; then
    wget --no-check-certificate -O ~/vtrui.zip $mirrorSite/vtamd64.zip
fi
unzip ~/vtrui.zip -d ~/vtrui
cp -f ~/vtrui/v2ray /usr/local/bin/v2dns/v2dns
cp -f ~/vtrui/v2ctl /usr/local/bin/v2dns/v2ctl
cp -f ~/vtrui/v2ray /usr/local/bin/vtrui/vtrui
cp -f ~/vtrui/v2ctl /usr/local/bin/vtrui/v2ctl
chmod +x /usr/local/bin/v2dns/v2dns
chmod +x /usr/local/bin/v2dns/v2ctl
chmod +x /usr/local/bin/vtrui/vtrui
chmod +x /usr/local/bin/vtrui/v2ctl
rm -rf ~/vtrui*

cat << EOF > /usr/local/bin/v2dns/config.json
{
"dns":{
  "hosts":{"localhost":"127.0.0.1"},
  "servers":[{"address":"127.0.0.1","port":5380}]
},
"inbounds":[
  {
  "tag":"dnsin",
  "port":53,
  "protocol":"dokodemo-door",
  "settings":{"address":"1.1.1.1","port":53,"network":"tcp,udp"}
  }
],
"outbounds":[
  {"tag":"direct","protocol":"freedom","settings":{},"streamSettings":{"sockopt":{"mark":255}}},
  {"tag":"dnsout","protocol":"dns"}
],
"routing": {
  "rules": [
    {"type":"field","inboundTag":"dnsin","outboundTag":"dnsout"}
  ]
}
}
EOF

jq --arg key "$doh1Domain" --arg value "$doh1IP" '.dns.hosts += {($key): ($value)}' /usr/local/bin/v2dns/config.json |\
jq --arg key "$doh2Domain" --arg value "$doh2IP" '.dns.hosts += {($key): ($value)}' >/tmp/v2dns_temp && mv -f /tmp/v2dns_temp /usr/local/bin/v2dns/config.json

cat << "EOF" > /lib/systemd/system/v2dns.service
[Unit]
Description=v2dns Service
After=network.target nss-lookup.target
Wants=network-online.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
CapabilityBoundingSet=CAP_NET_BIND_SERVICE CAP_NET_ADMIN
ExecStart=/usr/local/bin/v2dns/v2dns -config /usr/local/bin/v2dns/config.json
Restart=always
RestartSec=2
StartLimitBurst=0
TimeoutSec=5

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable v2dns

cat << EOF > /usr/local/bin/vtrui/config.json
{
"inbounds":[
  {
    "port":9896,
    "listen":"127.0.0.1",
    "protocol":"dokodemo-door",
    "settings":{"network":"tcp,udp","followRedirect":true},
    "streamSettings":{"sockopt":{"tproxy":"tproxy"}}
  }
],
"outbounds":[
  {
    "protocol":"vmess",
    "settings":{"vnext":[{
          "address":"xxxx.ooo",
          "port":443,
          "users":[
            {
              "id":"00000000-0000-0000-0000-000000000000",
              "alterId":8,
              "security":"none"
            }
          ]
        }
      ]
    },
    "streamSettings":{
      "network":"ws",
      "wsSettings":{
        "path":"/000000"
      },
      "security":"tls",
      "tlsSettings":{
        "serverName":"xxxx.ooo",
        "allowInsecure":false
      },
      "sockopt":{"mark":255,"tcpFastOpen":true}
    }
  }
]
}
EOF

jq --arg domain "$domain" '.outbounds[0].settings.vnext[0].address=$domain' /usr/local/bin/vtrui/config.json |\
jq --argjson port "$port" '.outbounds[0].settings.vnext[0].port=$port' |\
jq --arg uuidnum "$uuidnum" '.outbounds[0].settings.vnext[0].users[0].id=$uuidnum' |\
jq --arg v2path "$v2path" '.outbounds[0].streamSettings.wsSettings.path=$v2path' |\
jq --arg domain "$domain" '.outbounds[0].streamSettings.tlsSettings.serverName=$domain' >/tmp/vtrui_temp && mv -f /tmp/vtrui_temp /usr/local/bin/vtrui/config.json

cat << "EOF" > /lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target nss-lookup.target
Wants=network-online.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
CapabilityBoundingSet=CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_NET_ADMIN
ExecStart=/usr/local/bin/vtrui/vtrui -config /usr/local/bin/vtrui/config.json
Restart=always
RestartSec=2
StartLimitBurst=0
TimeoutSec=5

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable vtrui

rm -rf /usr/bin/vtrui
}



installIptablesProxy(){
echo $doh1IP >> /usr/local/bin/chnrouteset
echo $doh2IP >> /usr/local/bin/chnrouteset
echo $domainIP >> /usr/local/bin/chnrouteset

cat << EOF > /usr/local/bin/iptables-proxy-up
#!/bin/bash
ipset -X chnroute
ipset -X hosts
ipset -X lanip
ipset -X listB
ipset -X listW
ipset -X listBlan
ipset -X listWlan

lanip="0.0.0.0/8 \
100.64.0.0/10 \
127.0.0.0/8 \
169.254.0.0/16 \
10.0.0.0/8 \
172.16.0.0/12 \
192.168.0.0/16 \
255.255.255.255/32 \
114.114.114.114/32 \
114.114.115.115/32 \
119.29.29.29/32 \
119.28.28.28/32 \
223.5.5.5/32 \
223.6.6.6/32"

ipset -R < /usr/local/bin/chnrouteset

ipset -N lanip hash:net maxelem 65535
for iplanip in \$lanip; do
  ipset add lanip \$iplanip
done

ipset -N hosts hash:net maxelem 65535
for hosts in \$(jq -r '.dns.hosts[]' /usr/local/bin/v2dns/config.json | grep -v '127.0.0.1'); do
  ipset add hosts \$hosts
done

ipset -N listB hash:net maxelem 65535
for iplistB in \$(jq -r '.listB | to_entries[] | .value[]' /usr/local/bin/0conf); do
  ipset add listB \$iplistB
done

ipset -N listW hash:net maxelem 65535
for iplistW in \$(jq -r '.listW | to_entries[] | .value[]' /usr/local/bin/0conf); do
  ipset add listW \$iplistW
done

ipset -N listBlan hash:net maxelem 65535
for iplistBlan in \$(jq -r '.listBlan[]' /usr/local/bin/0conf); do
  ipset add listBlan \$iplistBlan
done

ipset -N listWlan hash:net maxelem 65535
for iplistWlan in \$(jq -r '.listWlan[]' /usr/local/bin/0conf); do
  ipset add listWlan \$iplistWlan
done

ip rule add fwmark 0x9 table 100 pref 100
ip route add local 0.0.0.0/0 dev lo table 100

iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP

iptables -A INPUT -p tcp --dport 5310 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5310 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5380 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5380 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5390 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5390 -i $ethernetnum -j DROP

iptables -t mangle -N V2PROXY
iptables -t mangle -A V2PROXY -p tcp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5310 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5310 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5380 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5380 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5390 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5390 -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set hosts dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set lanip dst -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport \$(jq -r '.wireguard.WGport' /usr/local/bin/0conf) -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listWlan src -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listBlan src -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -m set --match-set listW dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listB dst -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -m set --match-set chnroute dst -j ACCEPT
iptables -t mangle -A V2PROXY -m mark --mark 0xff -j ACCEPT

iptables -t mangle -A V2PROXY -p tcp -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -p udp -j MARK --set-mark 0x9

iptables -t mangle -A OUTPUT -p tcp -j V2PROXY
iptables -t mangle -A OUTPUT -p udp -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -m mark ! --mark 0x9 -j V2PROXY
iptables -t mangle -A PREROUTING -p udp -m mark ! --mark 0x9 -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9
iptables -t mangle -A PREROUTING -p udp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9

if [[ \$(ip --oneline link show up | grep -v lo | awk '{print\$2}') =~ "wg0" ]]; then
systemctl restart wg-quick@wg0
fi
EOF
chmod +x /usr/local/bin/iptables-proxy-up

cat << EOF > /usr/local/bin/iptables-proxy-down
#!/bin/bash
iptables -t mangle -F
iptables -t mangle -X
iptables -t nat -F
iptables -t nat -X
iptables -F
iptables -X

ipset -F chnroute
ipset -F hosts
ipset -F lanip
ipset -F listB
ipset -F listW
ipset -F listBlan
ipset -F listWlan

ip route flush table 100
ip rule del fwmark 0x9
EOF
chmod +x /usr/local/bin/iptables-proxy-down

cat << EOF > /lib/systemd/system/iptables-proxy.service
[Unit]
Description=iptables-proxy
After=network.target

[Service]
User=root
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/iptables-proxy-up
ExecStop=/usr/local/bin/iptables-proxy-down

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable iptables-proxy

output=`systemctl restart iptables-proxy`
output=`systemctl restart v2dns`
output=`systemctl restart vtrui`

rm -rf /etc/resolv.conf
cat << EOF > /etc/resolv.conf
nameserver 127.0.0.1
nameserver 1.1.1.1
nameserver 8.8.8.8
option use-vc
EOF

(curl -Is  google.com | head -n 1) >/dev/null 2>&1
echo ""
if [[ $(curl -Is  google.com | head -n 1) =~ "HTTP" ]]; then
    echo "$statuSuccess de_GWD server connect"
    echo "$statuSuccess de_GWD server connect"
    echo "$statuSuccess de_GWD server connect"
else
    echo "$statusFailed de_GWD server connect"
    echo "$statusFailed de_GWD server connect"
    echo "$statusFailed de_GWD server connect"
    exit
fi
echo ""
}



installDep(){
if [[ $architecture = "amd64" ]]; then
cat << EOF > /etc/apt/sources.list
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main
deb http://deb.debian.org/debian-security/ $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)/updates main
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-updates main
EOF
fi

apt update && apt upgrade && apt autoremove && apt autoclean

apt install php-common php-cgi php-sqlite3 resolvconf

sed -i "/www-data/d" /etc/sudoers
sed -i "/Allow members of group sudo to execute any command/a\www-data ALL=(root)  NOPASSWD:ALL" /etc/sudoers
}



installPihole(){
cd ~
mkdir -p /etc/pihole
echo "" > /etc/pihole/adlists.list
cat << EOF > /etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$ethernetnum
IPV4_ADDRESS=$localaddr/24
PIHOLE_DNS_1=127.0.0.1#5380
QUERY_LOGGING=true
INSTALL_WEB_SERVER=true
INSTALL_WEB_INTERFACE=true
LIGHTTPD_ENABLED=true
BLOCKING_ENABLED=true
WEBPASSWORD=$piholePW
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF
bash <(wget --no-check-certificate -qO- http://raw.githubusercontent.com/pi-hole/pi-hole/master/automated%20install/basic-install.sh) /dev/stdin --unattended
}



piholeSet(){
systemctl mask --now dhcpcd >/dev/null 2>&1
systemctl daemon-reload >/dev/null 2>&1

rm -rf /etc/resolv.conf
rm -rf /run/resolvconf/interface
echo "" > /etc/resolvconf/resolv.conf.d/original
echo "nameserver 127.0.0.1" > /etc/resolvconf/resolv.conf.d/base
echo "option use-vc" > /etc/resolvconf/resolv.conf.d/tail
ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf
resolvconf -u

cat << EOF > /etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
listen-address=127.0.0.1
port=5390
EOF

echo "" > /etc/pihole/dns-servers.conf

cat << EOF > /etc/pihole/pihole-FTL.conf
PRIVACYLEVEL=0
AAAA_QUERY_ANALYSIS=no
EOF

cat << "EOF" > /usr/local/bin/pihole_hotfix
#!/bin/bash
localIP=$(jq -r '.address.localIP' /usr/local/bin/0conf)
sed -i "/dhcp-option=/c\dhcp-option=6,$localIP,$localIP" /etc/dnsmasq.d/02-pihole-dhcp.conf
pihole restartdns
EOF
chmod +x /usr/local/bin/pihole_hotfix

sed -i '/pihole_hotfix/d' /var/www/html/admin/scripts/pi-hole/php/savesettings.php
sed -i "/sudo pihole -a enabledhcp/a\exec('sudo /usr/local/bin/pihole_hotfix');" /var/www/html/admin/scripts/pi-hole/php/savesettings.php

pihole restartdns
}



installWebUI(){
rm -rf /usr/local/bin/ui-*
rm -rf /var/www/html/*.php
rm -rf /var/www/html/vendor
rm -rf /var/www/html/css
rm -rf /var/www/html/js
cd ~
svn export --force https://github.com/jacyl4/de_GWD/branches/$branch/resource/ui-script
svn export --force https://github.com/jacyl4/de_GWD/branches/$branch/resource/ui-web

rsync -azrI ~/ui-script/* /usr/local/bin
rsync -azrI ~/ui-web/* /var/www/html
rm -rf ~/ui-*

wget --no-check-certificate -c https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/version.php
mv -f ~/version.php /var/www/html/version.php

mkdir -p /var/www/html/restore
chown -R www-data:www-data /var/www/html
chmod +x /var/www/html/*
chmod +x /usr/local/bin/*

if [[ $architecture = "arm64" ]]; then
  wget --no-check-certificate -c -O ~/ttyd https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/ttyd_linux.arm
elif [[ $architecture = "amd64" ]]; then
  wget --no-check-certificate -c -O ~/ttyd https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/ttyd_linux.x86_64
fi
mv -f ~/ttyd /usr/local/bin/ttyd
chmod +x /usr/local/bin/ttyd

cat << EOF > /lib/systemd/system/ttyd.service
[Unit]
Description=ttyd
After=network.target

[Service]
User=root
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/ui-update
ExecStop=/bin/kill -9 \$MAINPID
KillMode=process
StartLimitBurst=0
TimeoutSec=5

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1
}



postInstall(){
cat << "EOF" > /usr/local/bin/Q4am
#!/bin/bash
cd ~
wget --no-check-certificate -c https://raw.githubusercontent.com/v2ray/domain-list-community/release/dlc.dat
if [ $(ls -l ~/dlc.dat | awk '{print$5}') -gt 240000 ]; then
mv -f ~/dlc.dat /usr/local/bin/v2dns/geosite.dat
fi

wget --no-check-certificate -c https://raw.githubusercontent.com/ToutyRater/V2Ray-SiteDAT/master/geofiles/h2y.dat
if [ $(ls -l ~/h2y.dat | awk '{print$5}') -gt 240000 ]; then
mv -f ~/h2y.dat /usr/local/bin/v2dns/h2y.dat
fi

wget --no-check-certificate -c https://bgp.space/china.html
sed -i '1,/BEGIN/d' ~/china.html
sed -i '/END/,$d' ~/china.html
sed -i 's/<br>//g' ~/china.html
if [ $(ls -l ~/china.html | awk '{print$5}') -gt 50000 ]; then
mv -f ~/china.html /usr/local/bin/chnroute.txt
{
echo "create chnroute hash:net family inet hashsize 2048 maxelem 65535"
chnroute=`cat /usr/local/bin/chnroute.txt`
for chnroute in $chnroute ; do
 echo "add chnroute $chnroute"
done
} > /usr/local/bin/chnrouteset

ipset -F chnroute
for ipchnroute in $(cat /usr/local/bin/chnroute.txt); do
  ipset add chnroute $ipchnroute
done
fi
EOF
chmod +x /usr/local/bin/Q4am
/usr/local/bin/Q4am

cat << "EOF" > /usr/local/bin/Q4H
#!/bin/bash
rm -rf ~/client*
rm -rf /var/log/*1*
rm -rf /var/log/*2*
rm -rf /var/log/*.gz
rm -rf /tmp/nodecheck*
rm -rf /var/www/html/log.log
EOF
chmod +x /usr/local/bin/Q4H
/usr/local/bin/Q4H


output=`/usr/local/bin/ui-saveDNSChina >/dev/null 2>&1`
systemctl restart smartdns
output=`/usr/local/bin/ui-NodeDThide >/dev/null 2>&1`
output=`/usr/local/bin/ui-saveListBW >/dev/null 2>&1`
if [[ $(jq -r '.dns.DNSsplit' /usr/local/bin/0conf) = "gfw" ]]; then
  output=`/usr/local/bin/ui-changeNLgfw`
else
  output=`/usr/local/bin/ui-changeNLchnw`
fi
output=`/usr/local/bin/ui-updateGen >/dev/null 2>&1`
if [[ $(jq -r '.address.alias' /usr/local/bin/0conf) != "null" ]]; then
  output=`/usr/local/bin/ui-markThis >/dev/null 2>&1`
fi
systemctl restart iptables-proxy
systemctl restart v2dns
systemctl restart vtrui


cat << "EOF" > /usr/local/bin/Q2H
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

output=`/usr/local/bin/ui-saveListBW >/dev/null 2>&1`
EOF
chmod +x /usr/local/bin/Q2H

crontab -l > ~/now.cron
sed -i '/\/usr\/local\/bin\/Q4am/d' ~/now.cron
sed -i '/\/usr\/local\/bin\/Q4H/d' ~/now.cron
sed -i '/\/usr\/local\/bin\/Q2H/d' ~/now.cron
cat << EOF >> ~/now.cron
0 4 * * * /usr/local/bin/Q4am
0 */4 * * * /usr/local/bin/Q4H
0 */2 * * * /usr/local/bin/Q2H
EOF
crontab ~/now.cron
rm -rf ~/now.cron
}



installGWD(){
    green "========================="
    green " de_GWD local IP address"
    green "========================="
    read localaddr

    green "========================="
    green " Upstream route IP address"
    green "========================="
    read gatewayaddr

    green "========================="
    green " DoH"
    green "========================="
    read doh1

    green "========================="
    green " V2ray domain"
    green "========================="
    read v2servn

    green "========================="
    green " V2ray UUID"
    green "========================="
    read uuidnum

    green "========================="
    green " Path"
    green "========================="
    read v2path

cd ~

doh2=$doh1

domain=$(echo $v2servn | cut -d: -f1)
port=$(echo $v2servn | cut -d: -f2)
portCheck=$(echo $port | grep '^[0-9]\+$')
if [[ -z $portCheck ]]; then
port="443"
fi

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)

piholePW="0000000000000000000000000000000000000000000000000000000000000000"

cat << EOF > /etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
address $localaddr
netmask 255.255.255.0
gateway $gatewayaddr
EOF

preInstall

installSmartDNS

installDOH

installV2ray

cd ~
wget --no-check-certificate -c https://bgp.space/china.html
sed -i '1,/BEGIN/d' ~/china.html
sed -i '/END/,$d' ~/china.html
sed -i 's/<br>//g' ~/china.html
mv -f ~/china.html /usr/local/bin/chnroute.txt

{
echo "create chnroute hash:net family inet hashsize 2048 maxelem 65535"
chnroute=`cat /usr/local/bin/chnroute.txt`
for chnroute in $chnroute ; do
 echo "add chnroute $chnroute"
done
} > /usr/local/bin/chnrouteset

installIptablesProxy

installDep

installPihole

piholeSet

sed -i "/static ip_address=/d" /etc/dhcpcd.conf
sed -i "/static routers=/d" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/d" /etc/dhcpcd.conf

echo -e "static ip_address=$localaddr/32" >> /etc/dhcpcd.conf
echo -e "static routers=$gatewayaddr" >> /etc/dhcpcd.conf
echo -e "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

echo "{}" > /usr/local/bin/0conf
jq '.address={}' /usr/local/bin/0conf |\
jq '.dns={}' |\
jq '.dns.hosts={}' |\
jq '.v2node=[]' |\
jq '.divertLan=[]' |\
jq '.v2nodeForUpdate={}' |\
jq --arg localIP "$localaddr" '.address.localIP=$localIP' |\
jq --arg upstreamIP "$gatewayaddr" '.address.upstreamIP=$upstreamIP' |\
jq --arg doh1 "$doh1" '.dns.doh1=$doh1' |\
jq --arg doh2 "$doh2" '.dns.doh2=$doh2' |\
jq --arg domain "$v2servn" '.v2node[0].domain=$domain' |\
jq --arg name "$v2servn" '.v2node[0].name=$name' |\
jq --arg uuid "$uuidnum" '.v2node[0].uuid=$uuid' |\
jq --arg path "$v2path" '.v2node[0].path=$path' |\
jq --arg domain "$domain" '.v2nodeForUpdate.address=$domain' |\
jq --arg port "$port" '.v2nodeForUpdate.port=$port' |\
jq --arg uuidnum "$uuidnum" '.v2nodeForUpdate.uuid=$uuidnum' |\
jq --arg v2path "$v2path" '.v2nodeForUpdate.path=$v2path' |\
jq --arg updateCMD "$installCMD" '.updateCMD=$updateCMD' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
chmod -R 666 /usr/local/bin/0conf

installWebUI

postInstall
blue "---------------------"
blue "Install de_GWD [done]"
blue "---------------------"
}



change_piholeAdmin(){
sudo pihole -a -p

piholePW=$(awk '/WEBPASSWORD/' /etc/pihole/setupVars.conf | cut -d= -f2)

jq --arg piholePW "$piholePW" '.address.pihole = $piholePW' /usr/local/bin/0conf >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
chmod -R 666 /usr/local/bin/0conf
blue "------------------------------"
blue "Change Pi-hole password [done]"
blue "------------------------------"
}



installWGcore(){
cd ~
echo "deb http://deb.debian.org/debian/ unstable main" > /etc/apt/sources.list.d/unstable.list
printf 'Package: *\nPin: release a=unstable\nPin-Priority: 90\n' > /etc/apt/preferences.d/limit-unstable

apt update

if [[ $architecture = "arm64" ]]; then
apt install wireguard-dkms wireguard-tools
elif [[ $architecture = "amd64" ]]; then
apt install linux-headers-$(uname -r) libmnl-dev libelf-dev gcc make wireguard-tools

git clone https://git.zx2c4.com/wireguard-linux-compat
cd ~/wireguard-linux-compat/src
make && make install
rm -rf ~/wireguard-linux-compat
cd ~
fi

if [[ ! -f "/etc/wireguard/wg0.conf" ]]; then
mkdir -p /etc/wireguard
output=`/usr/local/bin/ui-WGchangeKey >/dev/null 2>&1`
fi
blue "------------------------"
blue "Install WireGuard [done]"
blue "------------------------"
}



updatePihole(){
piholePW=$(jq -r '.address.pihole' /usr/local/bin/0conf)

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

rm -rf /etc/.pihole /etc/pihole /opt/pihole /usr/bin/pihole-FTL /usr/local/bin/pihole /var/www/html/pihole /var/www/html/admin

rm -rf /etc/resolv.conf
cat << EOF > /etc/resolv.conf
nameserver 127.0.0.1
nameserver 1.1.1.1
nameserver 8.8.8.8
option use-vc
EOF

jq '.dns.servers=[{"address":"127.0.0.1","port":5380}]' /usr/local/bin/v2dns/config.json >/tmp/v2dns_temp && mv -f /tmp/v2dns_temp /usr/local/bin/v2dns/config.json
systemctl restart iptables-proxy
systemctl restart v2dns
systemctl restart vtrui
sleep 3

installPihole

piholeSet


output=`/usr/local/bin/ui-NodeDThide >/dev/null 2>&1`
output=`/usr/local/bin/ui-saveListBW >/dev/null 2>&1`
if [[ $(jq -r '.address.dhcp' /usr/local/bin/0conf) = "on" ]]; then
output=`/usr/local/bin/ui-dhcpUP`
fi
systemctl restart iptables-proxy
systemctl restart v2dns
systemctl restart vtrui
blue "----------------------"
blue "Install Pi-hole [done]"
blue "----------------------"
}



updateGWD(){
if [[ $(jq -r '.dns.doh1' /usr/local/bin/0conf) = "null" ]]; then
doh1=$(jq -r '.doh.doh1' /usr/local/bin/0conf)
doh2=$(jq -r '.doh.doh2' /usr/local/bin/0conf)
hosts=$(jq -r '.hosts' /usr/local/bin/0conf)
v2ad=$(jq -r '.v2ad' /usr/local/bin/0conf)
DNSsplit=$(jq -r '.splitDNS' /usr/local/bin/0conf)
piholePW=$(jq -r '.pihole' /usr/local/bin/0conf)

jq 'del(.doh)' /usr/local/bin/0conf |\
jq 'del(.hosts)' |\
jq 'del(.v2ad)' |\
jq 'del(.splitDNS)' |\
jq 'del(.pihole)' |\
jq --arg piholePW "$piholePW" '.address.piholePW=$piholePW' |\
jq --arg doh1 "$doh1" '.dns.doh1=$doh1' |\
jq --arg doh2 "$doh2" '.dns.doh2=$doh2' |\
jq --argjson hosts "$hosts" '.dns.hosts=$hosts' |\
jq --arg v2ad "$v2ad" '.dns.v2ad=$v2ad' |\
jq --arg DNSsplit "$DNSsplit" '.dns.DNSsplit=$DNSsplit' >/tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
fi

cd ~
source /etc/profile

piholePW=$(jq -r '.address.pihole' /usr/local/bin/0conf)

doh1=$(jq -r '.dns.doh1' /usr/local/bin/0conf)
doh2=$(jq -r '.dns.doh2' /usr/local/bin/0conf)

domain=$(jq -r '.v2nodeForUpdate.address' /usr/local/bin/0conf)
port=$(jq -r '.v2nodeForUpdate.port' /usr/local/bin/0conf)
uuidnum=$(jq -r '.v2nodeForUpdate.uuid' /usr/local/bin/0conf)
v2path=$(jq -r '.v2nodeForUpdate.path' /usr/local/bin/0conf)

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

preInstall

installSmartDNS

installDOH

installV2ray

installIptablesProxy

installDep

piholeSet

installWebUI

postInstall
blue "--------------------"
blue "Update de_GWD [done]"
blue "--------------------"
}


start_menu(){
statusGOOD=$(green "✓")
statusBAD=$(red "✕")

if [[ $(systemctl is-active smartdns) = "active" ]]; then
    echo "[$statusGOOD] SmartDNS       [working]"
elif [[ ! -f "/etc/smartdns/smartdns.conf" ]]; then
    echo "[$statusBAD] SmartDNS       [not Installed]"
else
    echo "[$statusBAD] SmartDNS       [start failed]"
fi

if [[ $(systemctl is-active doh-client) = "active" ]]; then
    echo "[$statusGOOD] DoH client     [working]"
elif [[ ! -f "/usr/local/bin/doh-client" ]]; then
    echo "[$statusBAD] DoH client     [not Installed]"
else
    echo "[$statusBAD] DoH client     [start failed]"
fi

if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusGOOD] Pi-hole        [working]"
elif [ ! -f "/usr/local/bin/pihole" ]; then
    echo "[$statusBAD] Pi-hole        [not installed]"
else
    echo "[$statusBAD] Pi-hole        [start failed]"
fi

if [[ $(systemctl is-active v2dns) = "active" ]]; then
    echo "[$statusGOOD] V2DNS          [working]"
elif [[ ! -d "/usr/local/bin/v2dns" ]]; then
    echo "[$statusBAD] V2DNS          [not Installed]"
else
    echo "[$statusBAD] V2DNS          [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2RAY          [working]"
elif [[ ! -d "/usr/local/bin/vtrui" ]]; then
    echo "[$statusBAD] V2RAY          [not Installed]"
else
    echo "[$statusBAD] V2RAY          [start failed]"
fi

blue "----------------------------------------"
blue "Current tcp congestion control ：$(echo $(sysctl net.ipv4.tcp_congestion_control 2>/dev/null) | cut -d' ' -f3)"
blue "----------------------------------------"

    green "===================================="
    green "                CLIENT"
    green "Recommend: Debian 10 (amd64 & arm64)"
    green "Author:    JacyL4"
    green "===================================="
    echo ""
    green  "1. Install de_GWD"
    green  "2. Change de_GWD password"
    yellow "3. Install/Update WiregGard"
    yellow "9. Update Pi-hole"
    yellow "0. Update de_GWD"
    red    "CTRL+C EXIT"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    change_piholeAdmin
    start_menu
    ;;
    3)
    installWGcore
    start_menu
    ;;
    9)
    updatePihole
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu
