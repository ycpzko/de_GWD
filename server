#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }
statusGOOD=$(green "✓")
statusBAD=$(red "✕")
statusNONE=$(yellow "-")

export DEBIAN_FRONTEND=noninteractive
export PIHOLE_SKIP_OS_CHECK=true



preInstall(){
if [[ $(free -m | awk 'NR==3{print$2}') = "0" ]]; then
fallocate -l 1G /swapfile
dd if=/dev/zero of=/swapfile bs=1k count=1024k status=progress
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
sed -i "/swapfile/d" /etc/fstab
echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
echo "RESUME=" > /etc/initramfs-tools/conf.d/resume
fi

date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf /etc/resolv.conf

cat << EOF >/etc/resolv.conf
nameserver 1.1.1.1
nameserver 8.8.8.8
nameserver 1.0.0.1
nameserver 8.8.4.4
EOF

cat << EOF >/etc/apt/apt.conf.d/01InstallLess
APT::Get::Assume-Yes "true";
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF

cat << EOF >/etc/apt/apt.conf.d/71debconf
Dpkg::Options {
   "--force-confdef";
   "--force-confold";
};
EOF

rm -rf /etc/apt/sources.list.d/*

cat << EOF >/etc/apt/sources.list
deb http://deb.debian.org/debian/ $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main contrib non-free
deb http://security.debian.org/debian-security $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)/updates main contrib non-free
deb http://deb.debian.org/debian/ $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)-updates main contrib non-free
EOF

apt update
apt upgrade && apt autoremove && apt autoclean

apt install sudo locales net-tools netcat dnsutils resolvconf wget curl rsync git jq unzip ca-certificates apt-transport-https gnupg2 haveged socat
source /etc/profile
systemctl enable --now haveged >/dev/null 2>&1

echo "deb [arch=amd64] https://download.docker.com/linux/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) stable" > /etc/apt/sources.list.d/docker.list
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -

apt update
apt install docker-ce docker-ce-cli containerd.io

sed -i "/LimitNOFILE=/c\LimitNOFILE=1000000"  /lib/systemd/system/docker.service
sed -i "/LimitNPROC=/c\LimitNPROC=64000"  /lib/systemd/system/docker.service
systemctl daemon-reload >/dev/null 2>&1
systemctl enable docker
systemctl restart docker

systemctl mask --now systemd-resolved  >/dev/null 2>&1
systemctl daemon-reload >/dev/null 2>&1
dpkg --configure -a

cat << EOF >/etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 64000
* hard nproc 64000
EOF

echo "ulimit -n 1000000" > ~/.bash_profile

modprobe ip_conntrack

cat << EOF >/etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 2
net.unix.max_dgram_qlen = 1024
net.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 5
fs.file-max = 1000000
fs.inotify.max_user_instances = 819200
fs.inotify.max_queued_events = 32000
fs.inotify.max_user_watches = 64000
net.core.netdev_max_backlog = 250000
net.core.optmem_max = 4194304
net.core.rmem_max = 4194304
net.core.rmem_default = 4194304
net.core.wmem_max = 4194304
net.core.wmem_default = 4194304
net.core.somaxconn = 256000
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_tw_reuse = 0
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_orphan_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_sack = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_wmem = 4096 65536 4194304
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_slow_start_after_idle = 0
EOF

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf

if [[ $(uname -r) =~ "bbrplus" ]]; then
  echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
elif [[ $(uname -r) > "5.6" ]]; then
  echo "net.core.default_qdisc = cake" >> /etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
else
  echo "net.core.default_qdisc = fq_codel" >> /etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
fi
sysctl -p

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen

cat << EOF >/etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF

locale-gen en_US.UTF-8

echo "Asia/Shanghai" > /etc/timezone
ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
}



installIptablesRules(){

cat << EOF >/usr/local/bin/iptablesrules-up
#!/bin/bash
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP

iptables -A INPUT -p udp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT
iptables -A INPUT -p tcp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT

iptables -A INPUT -p udp --dport 53 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 53 -i $ethernetnum -j DROP
EOF

chmod +x /usr/local/bin/iptablesrules-up

cat << EOF >/usr/local/bin/iptablesrules-down
#!/bin/bash
iptables -F
iptables -X
EOF

chmod +x /usr/local/bin/iptablesrules-down

cat << EOF >/lib/systemd/system/iptablesrules.service
[Unit]
Description=iptablesrules
After=network.target

[Service]
User=root
Type=oneshot
ExecStart=/bin/bash /usr/local/bin/iptablesrules-up
ExecStop=/bin/bash /usr/local/bin/iptablesrules-down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1
systemctl enable iptablesrules
systemctl restart iptablesrules
}



installPihole(){
mkdir -p /etc/pihole

cat /dev/null > /etc/pihole/adlists.list

cat << EOF >/etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$ethernetnum
IPV4_ADDRESS=$localaddr/24
PIHOLE_DNS_1=1.1.1.1
PIHOLE_DNS_2=8.8.8.8
PIHOLE_DNS_3=1.0.0.1
PIHOLE_DNS_4=8.8.4.4
QUERY_LOGGING=false
INSTALL_WEB_SERVER=false
INSTALL_WEB_INTERFACE=false
LIGHTTPD_ENABLED=false
BLOCKING_ENABLED=true
WEBPASSWORD=0000000000000000000000000000000000000000000000000000000000000000
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF

curl -sSL https://install.pi-hole.net | bash /dev/stdin --unattended
}



piholeSet(){
systemctl mask --now lighttpd
systemctl mask --now dhcpcd
systemctl daemon-reload >/dev/null 2>&1

rm -rf /etc/resolv.conf
rm -rf /run/resolvconf/interface
cat /dev/null > /etc/resolvconf/resolv.conf.d/head
cat /dev/null > /etc/resolvconf/resolv.conf.d/original
cat /dev/null > /etc/resolvconf/resolv.conf.d/tail
echo "nameserver 127.0.0.1" > /etc/resolvconf/resolv.conf.d/base
ln -fs /etc/resolvconf/run/resolv.conf /etc/resolv.conf
resolvconf -u

cat << EOF >/etc/pihole/pihole-FTL.conf
PRIVACYLEVEL=0
AAAA_QUERY_ANALYSIS=no
EOF

pihole logging off
}



installDOHser(){
rm -rf /usr/local/bin/doh-server

wget -O ~/doh.zip https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/dohamd64.zip
unzip ~/doh.zip -d ~/
mv -f ~/doh/doh-server /usr/local/bin/doh-server
chmod +x /usr/local/bin/doh-server
rm -rf ~/doh*

mkdir -p /etc/dns-over-https

cat << EOF >/etc/dns-over-https/doh-server.conf
listen = [ "127.0.0.1:8053" ]

path = "/dq"

upstream = [ "udp:127.0.0.1:53" ]

timeout = 10
tries = 3
verbose = false
log_guessed_client_ip = false
EOF

mkdir -p /etc/NetworkManager/dispatcher.d

cat << "EOF" > /etc/NetworkManager/dispatcher.d/doh-server
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-server.service >/dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-server.service >/dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    *)
        exit 0
        ;;
esac
EOF

chmod +x /etc/NetworkManager/dispatcher.d/doh-server

cat << "EOF" > /lib/systemd/system/doh-server.service
[Unit]
Description=DNS-over-HTTPS server
After=network.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
ExecStart=/usr/local/bin/doh-server -conf /etc/dns-over-https/doh-server.conf
Restart=always
RestartSec=2
StartLimitBurst=0

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1
systemctl enable doh-server
systemctl restart doh-server
}



installV2ray(){
rm -rf /usr/local/bin/vtrui
rm -rf /etc/vtrui
mkdir -p /usr/local/bin/vtrui
mkdir -p ~/vtrui
wget -O ~/vtrui.zip https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/vtamd64.zip
unzip ~/vtrui.zip -d ~/vtrui
cp -f ~/vtrui/v2ray /usr/local/bin/vtrui/vtrui
cp -f ~/vtrui/v2ctl /usr/local/bin/vtrui/v2ctl
chmod +x /usr/local/bin/vtrui/vtrui
chmod +x /usr/local/bin/vtrui/v2ctl
rm -rf ~/vtrui*

cat << EOF >/usr/local/bin/vtrui/config.json
{
  "dns":{"servers":[{"address":"127.0.0.1","port":53}]},
  "inbounds": [
    {
    "port":11810,
    "listen":"127.0.0.1",
    "protocol":"vmess",
    "settings":{
      "clients":[]
      },
    "streamSettings": {
      "network":"ws",
      "wsSettings":{"path":"/0000"}
      }
    }
  ],
  "outbounds": [
  {"protocol":"freedom","settings":{"domainStrategy":"UseIPv4"}}
  ]
}
EOF


{
for v2uuids in $v2uuids; do
echo '{"id": "'$v2uuids'", "level": 1, "alterId": 32}'
done
} >/tmp/v2clients


cat /tmp/v2clients | while read v2clients
do
jq --argjson v2clients "$v2clients" '.inbounds[0].settings.clients+=[$v2clients]' /usr/local/bin/vtrui/config.json >/tmp/vtrui_temp && mv -f /tmp/vtrui_temp /usr/local/bin/vtrui/config.json
done
rm -rf /tmp/v2clients

jq --arg v2path "$v2path" '.inbounds[0].streamSettings.wsSettings.path=$v2path' /usr/local/bin/vtrui/config.json >/tmp/vtrui_temp && mv -f /tmp/vtrui_temp /usr/local/bin/vtrui/config.json

cat << "EOF" > /lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target nss-lookup.target
Wants=network-online.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN
ExecStart=/usr/local/bin/vtrui/vtrui -config /usr/local/bin/vtrui/config.json
Restart=always
RestartSec=2
StartLimitBurst=0

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable vtrui
systemctl restart vtrui

rm -rf /usr/bin/vtrui
}



installNginx(){
mkdir -p "/etc/nginx"
mkdir -p "/etc/nginx/conf.d"
mkdir -p "/var/log/nginx"
mkdir -p "/var/www/html"
mkdir -p "/var/www/ssl"

rm -rf /etc/nginx/nginx.conf

cat << EOF >/etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections  100000;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 64 4k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;
  keepalive_timeout         60;
  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              "MSIE [1-6]\.";
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli                    on;
  brotli_static             on;
  brotli_comp_level         6;
  brotli_buffers            16 8k;
  brotli_min_length         20;
  brotli_window             16m;
  brotli_types              *;

  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

rm -rf /etc/nginx/conf.d/default.conf
cat /dev/null > /etc/nginx/conf.d/default.conf

docker stop nginx >/dev/null 2>&1
docker rm nginx >/dev/null 2>&1

docker rmi jacyl4/nginx_tls1.3:latest >/dev/null 2>&1
docker pull jacyl4/nginx_tls1.3:latest

if [[ -d "/etc/php" ]]; then
mkdir -p /run/php
chown -R www-data:www-data /run/php

docker run -d --name=nginx --net=host --restart=always \
-v /etc/localtime:/etc/localtime \
-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /etc/nginx/conf.d/:/etc/nginx/conf.d/ \
-v /run/php/:/run/php/ \
-v /var/www/html/:/var/www/html/ \
-v /var/www/ssl/:/var/www/ssl/ \
jacyl4/nginx_tls1.3:latest
else
docker run -d --name=nginx --net=host --restart=always \
-v /etc/localtime:/etc/localtime \
-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /etc/nginx/conf.d/:/etc/nginx/conf.d/ \
-v /var/www/html/:/var/www/html/ \
-v /var/www/ssl/:/var/www/ssl/ \
jacyl4/nginx_tls1.3:latest
fi
}



makeSSL_D(){
rm -rf /var/www/ssl/*
export CF_Key="$CFapikey"
export CF_Email="$CFemail"

curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --upgrade  --auto-upgrade
~/.acme.sh/acme.sh --issue --dns dns_cf -d $topDomain -d *.$topDomain --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $topDomain --ecc \
               --key-file       /var/www/ssl/$topDomain.key  \
               --fullchain-file /var/www/ssl/$topDomain.cer \
               --reloadcmd     "docker container exec nginx nginx -s reload"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

cat << EOF >/var/www/ssl/update_ocsp_cache
#!/bin/bash
wget -O ~/intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O ~/root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv ~/intermediate.pem /var/www/ssl
mv ~/root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/$topDomain.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF

chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

crontab -l > ~/now.cron
sed -i '/update_ocsp_cache/d' ~/now.cron
echo '0 0 * * 6 /var/www/ssl/update_ocsp_cache' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
}



makeSSL_W(){
rm -rf /etc/nginx/conf.d/default.conf

cat << EOF >/etc/nginx/conf.d/default.conf
server {
    listen      80;
    server_name $domain;
    root        /var/www/html;
    index       index.php index.html index.htm;
}
EOF

docker container exec nginx nginx -s reload

rm -rf /var/www/ssl/*

curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --upgrade  --auto-upgrade
~/.acme.sh/acme.sh --issue -d $domain -w /var/www/html --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $domain --ecc \
               --key-file       /var/www/ssl/$domain.key  \
               --fullchain-file /var/www/ssl/$domain.cer \
               --reloadcmd     "docker container exec nginx nginx -s reload"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

cat << EOF >/var/www/ssl/update_ocsp_cache
#!/bin/bash
wget -O ~/intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O ~/root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv ~/intermediate.pem /var/www/ssl
mv ~/root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/$domain.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
    
docker container exec nginx nginx -s reload
EOF

chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

crontab -l > ~/now.cron
sed -i '/update_ocsp_cache/d' ~/now.cron
echo '0 0 * * 6 /var/www/ssl/update_ocsp_cache' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
}



nginxWebConf(){
touch /etc/nginx/conf.d/0_serverUpstream
touch /etc/nginx/conf.d/3_reverseProxy

if [[ -n $portCheck ]] && [[ $portCheck != "443" ]]; then

cat << EOF >/etc/nginx/conf.d/1_serverHead
server {
  listen $port ssl http2 fastopen=128 reuseport;
  server_name $domain;
  root $htmldir;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/$topDomain.cer;
  ssl_certificate_key /var/www/ssl/$topDomain.key;
EOF

else

cat << EOF >/etc/nginx/conf.d/1_serverHead
server {
  listen 80;
  server_name $domain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl http2 fastopen=128 reuseport;
  server_name $domain;
  root $htmldir;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/$domain.cer;
  ssl_certificate_key /var/www/ssl/$domain.key;
EOF

fi

cat << EOF >/etc/nginx/conf.d/2_tlsParameter
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 4k;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;

  add_header Referrer-Policy "no-referrer" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-Download-Options "noopen" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Permitted-Cross-Domain-Policies "none" always;
  add_header X-Robots-Tag "none" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Strict-Transport-Security "max-age=63072000" always;

  location ~ /\.(?!well-known).* {
    deny all;
  }

EOF

cat << EOF >/etc/nginx/conf.d/4_v2Proxy
location /dq {
  proxy_pass                http://127.0.0.1:8053/dq;
  proxy_set_header          Host \$host;
  proxy_set_header          X-Real-IP \$remote_addr;
}

location $v2path {
  proxy_pass                http://127.0.0.1:11810;
  proxy_http_version        1.1;
  proxy_set_header          Host \$http_host;
  proxy_set_header          Upgrade "WebSocket";
  proxy_set_header          Connection "upgrade";
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_set_header          X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_connect_timeout     432000;
  proxy_send_timeout        432000;
  proxy_read_timeout        432000;
  proxy_redirect            off;
  proxy_buffering           off;
  proxy_buffer_size         4k;
}
}
EOF

cat << EOF >/etc/nginx/conf.d/merge.sh
#!/bin/bash
rm -rf /etc/nginx/conf.d/default.conf

cat /etc/nginx/conf.d/0_serverUpstream > /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/1_serverHead >> /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/2_tlsParameter >> /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/3_reverseProxy >> /etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/4_v2Proxy >> /etc/nginx/conf.d/default.conf

docker container exec nginx nginx -s reload
EOF

chmod +x /etc/nginx/conf.d/merge.sh
/etc/nginx/conf.d/merge.sh
}



postInstall(){

cat << "EOF" > /usr/local/bin/autoUpdate
#!/bin/bash
wget -O ~/update https://raw.githubusercontent.com/jacyl4/de_GWD/master/server
sed -i '$d' ~/update
echo "updateGWD" >>  ~/update
chmod +x ~/update
~/update

crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/update
EOF

chmod +x /usr/local/bin/autoUpdate

cat << "EOF" > /usr/local/bin/Q2H
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf ~/server*
rm -rf /var/log/*1
rm -rf /var/log/*2
rm -rf /var/log/*gz

localVer=$(awk 'NR==1' /usr/local/bin/version.php)
remoteVer=$(curl -s https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php | awk 'NR==1')

if [[ $localVer != $remoteVer ]]; then
crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
echo '30 4 * * *  /usr/local/bin/autoUpdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF

chmod +x /usr/local/bin/Q2H

crontab -l > ~/now.cron
sed -i '/\/usr\/local\/bin\/Q2H/d' ~/now.cron
echo '0 */2 * * * /usr/local/bin/Q2H' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

indexpage=$(ls /var/www/html/index.* 2>/dev/null | wc -l)
if [ "$indexpage" = "0" ]; then 
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/sample.zip
unzip sample.zip
rsync -azrI ~/sample/* /var/www/html/
rm -rf ~/sample*
fi

wget -O /usr/local/bin/version.php https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php
}




installGWD(){
    green "=================="
    green " Input VPS domain"
    green "=================="
    read vpsdomainP

domain=$(echo $vpsdomainP | cut -d: -f1)
port=$(echo $vpsdomainP | cut -d: -f2)
portCheck=$(echo $port | grep '^[0-9]\+$')
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)

if [[ -n $portCheck ]] && [[ $portCheck != "443" ]]; then

    green "==============================="
    green " Cloudflare API KEY"
    green "==============================="
    read CFapikey

    green "==============================="
    green " Cloudflare Email"
    green "==============================="
    read CFemail

fi

cd ~

v2uuids=$(cat /proc/sys/kernel/random/uuid)
v2path="/$(echo $v2uuids | awk '{print substr($0,length($1)-5)}')"

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}')
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)
gatewayaddr=$(ip route show | awk '/'$ethernetnum'/ {print$3;exit}')

htmldir="/var/www/html"

cat << EOF >/etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF

preInstall

installIptablesRules

installPihole

piholeSet

sed -i "/static ip_address=/d" /etc/dhcpcd.conf
sed -i "/static routers=/d" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/d" /etc/dhcpcd.conf

echo -e "static ip_address=$localaddr/32" >> /etc/dhcpcd.conf
echo -e "static routers=$gatewayaddr" >> /etc/dhcpcd.conf
echo -e "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

installDOHser

installV2ray

if [[ -n $portCheck ]] && [[ $portCheck != "443" ]]; then

installNginx

makeSSL_D

nginxWebConf

else

installNginx

makeSSL_W

nginxWebConf

fi

postInstall

blue "---------------------------------------------"
blue  "Install de_GWD [done]"
echo ""
blue "DoH:    $(yellow "$vpsdomainP/dq")"
blue "Domain: $(yellow "$vpsdomainP")"
blue "PATH:   $(yellow "$v2path")"
blue "UUID:   $(yellow "$v2uuids")"
blue "---------------------------------------------"
}



installBBRplus(){
export DEBIAN_FRONTEND=noninteractive
apt install -y wget
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget --no-check-certificate https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/linux-headers-4.14.168-bbrplus_4.14.168-bbrplus-$(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)_amd64.deb
wget --no-check-certificate https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/linux-image-4.14.168-bbrplus_4.14.168-bbrplus-$(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)_amd64.deb
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb

apt purge -y linux-image-amd64
apt purge -y linux-image-*-amd64
update-grub

cat << EOF >~/bbrkernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf

echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
sysctl -p

crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel

systemctl restart sshd
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

reboot
blue "-----------------------"
blue  "Install bbrplus [done]"
blue "-----------------------"
}



installBBR(){
export DEBIAN_FRONTEND=noninteractive
apt install -y wget
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget --no-check-certificate https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/linux-headers-$(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)_amd64.deb
wget --no-check-certificate https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/linux-image-$(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1)_amd64.deb
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb

apt purge -y linux-image-amd64
apt purge -y linux-image-*-amd64
update-grub

cat << EOF >~/bbrkernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf

echo "net.core.default_qdisc = cake" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
sysctl -p

crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel

systemctl restart sshd
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

reboot
blue "----------------------------"
blue "Install latest kernel [done]"
blue "----------------------------"
}



changeStaticIP(){
    green "========="
    green "Address"
    green "========="
    read localaddr

    green "========="
    green "Gateway"
    green "========="
    read gatewayaddr

sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf

sed -i "/static ip_address=/d" /etc/dhcpcd.conf
sed -i "/static routers=/d" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/d" /etc/dhcpcd.conf

echo -e "static ip_address=$localaddr/32" >> /etc/dhcpcd.conf
echo -e "static routers=$gatewayaddr" >> /etc/dhcpcd.conf
echo -e "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

reboot
blue "-----------------"
blue  "Change IP [done]"
blue "-----------------"
}



changeDomain(){
    green "=================="
    green " Input new domain"
    green "=================="
    read vpsdomainP

domain=$(echo $vpsdomainP | cut -d: -f1)
port=$(echo $vpsdomainP | cut -d: -f2)
portCheck=$(echo $port | grep '^[0-9]\+$')
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)

htmldir=$(awk '/root/ {print$2;exit}' /etc/nginx/conf.d/default.conf | cut -d';' -f1)

if [[ -n $portCheck ]] && [[ $portCheck != "443" ]]; then

    green "==============================="
    green " Cloudflare API KEY"
    green "==============================="
    read CFapikey

    green "==============================="
    green " Cloudflare Email"
    green "==============================="
    read CFemail

fi

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /usr/local/bin/vtrui/config.json)

if [[ -n $portCheck ]] && [[ $portCheck != "443" ]]; then
makeSSL_D
else
makeSSL_W
fi

nginxWebConf

blue "-----------------------------------------------"
blue "Change domain and issue new certificates [done]"
blue "-----------------------------------------------"
}



changeV2rayVerify(){
    green "=========="
    green " New path"
    green "=========="
    read npath

    green "=========="
    green " New UUID"
    green "=========="
    read nuuid

sed -i "$(sed -ne '/location/=' /etc/nginx/conf.d/default.conf | awk 'END{print}')s/.*/location "'\'$npath''" {/" /etc/nginx/conf.d/default.conf

docker container exec nginx nginx -s reload

jq --arg npath "$npath" '.inbounds[0].streamSettings.wsSettings.path=$npath' /usr/local/bin/vtrui/config.json |\
jq --arg nuuid "$nuuid" '.inbounds[0].settings.clients[0].id=$nuuid' >/tmp/vtrui_temp && mv -f /tmp/vtrui_temp /usr/local/bin/vtrui/config.json

systemctl restart vtrui
blue "------------------------------"
blue  "Change v2ray UUID&path [done]"
blue "------------------------------"
}



changev2rayupstream(){
    green "==================================================="
    green "Y. Change v2ray upstream / N. Delete v2ray upstream"
    green "==================================================="
    read v2rayupstreamyn

if [[ "$v2rayupstreamyn" = "Y" ]] || [[ "$v2rayupstreamyn" = "y" ]]; then
sed -i '/"outbounds":/,$d' /usr/local/bin/vtrui/config.json

    green "=========================="
    green "v2ray upstream domain:port"
    green "=========================="
    read upstreamDomainP

    green "=========================="
    green "v2ray upstream path"
    green "=========================="
    read upstreamPath

    green "=========================="
    green "v2ray upstream UUID"
    green "=========================="
    read upstreamUUID

domain=$(echo $upstreamDomainP | cut -d: -f1)
port=$(echo $upstreamDomainP | cut -d: -f2)

portCheck=$(echo $port | grep '^[0-9]\+$')
if [[ $portCheck = "" ]] || [[ $portCheck = "443" ]]; then
port="443"
fi

cat << EOF >> /usr/local/bin/vtrui/config.json
  "outbounds": [
    {
    "protocol":"vmess",
    "settings":{"vnext":[{
      "address":"$domain",
      "port":$port,
      "users":[{
        "id":"$upstreamUUID",
          "level":1,
          "alterId":4,
          "security":"auto"
        }]
      }]},
    "streamSettings":{
      "network":"ws",
      "wsSettings":{
        "path":"$upstreamPath",
        "headers":{
          "Host":"$domain"
          }
        },
      "security":"tls",
      "tlsSettings":{
        "serverName":"$domain",
        "allowInsecure":false
        }
      }
    }
  ]
}
EOF

systemctl restart vtrui
blue "-----------------------------"
blue  "Change v2ray upstream [done]"
blue "-----------------------------"

elif [[ "$v2rayupstreamyn" = "N" ]] || [[ "$v2rayupstreamyn" = "n" ]]; then
sed -i '/"outbounds":/,$d' /usr/local/bin/vtrui/config.json

cat >> /usr/local/bin/vtrui/config.json << EOF
  "outbounds": [
  {"protocol":"freedom","settings":{"domainStrategy":"UseIPv4"}}
  ]
}
EOF

systemctl restart vtrui
blue "-----------------------------"
blue  "Delete v2ray upstream [done]"
blue "-----------------------------"
fi
}



updatePihole(){
ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

rm -rf /etc/resolv.conf

cat << EOF >/etc/resolv.conf
nameserver 1.1.1.1
nameserver 8.8.8.8
nameserver 1.0.0.1
nameserver 8.8.4.4
EOF

date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf /etc/dnsmasq* /etc/.pihole /etc/pihole /opt/pihole /usr/bin/pihole-FTL /usr/local/bin/pihole /var/www/html/pihole /var/www/html/admin

systemctl daemon-reload

installPihole

piholeSet

blue "---------------------"
blue "Update Pi-hole [done]"
blue "---------------------"
}



updateGWD(){
if [[ -f /etc/vtrui/config.json ]]; then
  mkdir -p /usr/local/bin/vtrui
  cp -f /etc/vtrui/config.json /usr/local/bin/vtrui/config.json
  rm -rf /etc/vtrui
fi
rm -rf /etc/modules-load.d/nf_conntrack.conf
if [[ -f "/etc/nginx/conf.d/supp_head" ]] && [[ -f "/etc/nginx/conf.d/supp_body" ]]; then
mv -f /etc/nginx/conf.d/supp_head /etc/nginx/conf.d/0_serverUpstream
mv -f /etc/nginx/conf.d/supp_body /etc/nginx/conf.d/3_reverseProxy
rm -f /etc/nginx/conf.d/3_proxyPath
fi

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

domain=$(awk '/server_name/ {print$2;exit}' /etc/nginx/conf.d/default.conf | sed 's/.$//')
port=$(awk '/ssl http2 fastopen=128 reuseport/ {print$2}' /etc/nginx/conf.d/default.conf)
portCheck=$(echo $port | grep '^[0-9]\+$')
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /usr/local/bin/vtrui/config.json)
v2uuids=$(jq -r '.inbounds[0].settings.clients[].id' /usr/local/bin/vtrui/config.json)

htmldir=$(awk '/root/ {print$2;exit}' /etc/nginx/conf.d/default.conf | cut -d';' -f1)

if [[ -f /var/www/ssl/fullchain.cer ]]; then
  if [[ -n $portCheck ]] && [[ $portCheck != "443" ]]; then
  mv -f /var/www/ssl/fullchain.cer /var/www/ssl/$topDomain.cer
  else
  mv -f /var/www/ssl/fullchain.cer /var/www/ssl/$domain.cer
  fi
fi

cd ~
source /etc/profile

preInstall

installIptablesRules

piholeSet

installDOHser

installV2ray

installNginx

nginxWebConf

postInstall

blue "---------------------"
blue  "Update de_GWD [done]"
blue "---------------------"
}



printNode(){
vpsdomain=$(awk '/server_name/ {print$2;exit}' /etc/nginx/conf.d/default.conf | sed 's/.$//')
port=$(awk '/ssl http2 fastopen=128 reuseport/ {print$2}' /etc/nginx/conf.d/default.conf)

if [[ $port = "443" ]]; then
vpsdomainP=$vpsdomain
else
vpsdomainP=$vpsdomain:$port
fi

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /usr/local/bin/vtrui/config.json)
v2uuids=$(jq -r '.inbounds[0].settings.clients[].id' /usr/local/bin/vtrui/config.json)

blue "---------------------------------------------"
green "V2ray node information"
echo ""
blue "DoH:    $(yellow "$vpsdomainP/dq")"
blue "Domain: $(yellow "$vpsdomainP")"
blue "UUID:   $(yellow "$v2uuids")"
blue "PATH:   $(yellow "$v2path")"
blue "---------------------------------------------"
}



autoUpdateGWD(){
    green "=============================================="
    green "Y. Turn on AutoUpdate / N. Turn off AutoUpdate"
    green "=============================================="
    read autoUpdateswitch

if [[ "$autoUpdateswitch" = "Y" ]] || [[ "$autoUpdateswitch" = "y" ]]; then 
sed -i '/localVer=/,$d' /usr/local/bin/Q2H

cat << "EOF" >> /usr/local/bin/Q2H
localVer=$(awk 'NR==1' /usr/local/bin/version.php)
remoteVer=$(curl -s https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php | awk 'NR==1')

if [[ $localVer != $remoteVer ]]; then
crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
echo '30 4 * * *  /usr/local/bin/autoUpdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF

blue "--------------------------"
blue  "AutoUpdate turn on [done]"
blue "--------------------------"

elif [[ "$autoUpdateswitch" = "N" ]] || [[ "$autoUpdateswitch" = "n" ]]; then
sed -i '/localVer=/,$d' /usr/local/bin/Q2H

crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "---------------------------"
blue  "AutoUpdate turn off [done]"
blue "---------------------------"
fi
}



start_menu(){
if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusGOOD] Pi-hole      [working]"
elif [[ ! -f "/usr/local/bin/pihole" ]]; then
    echo "[$statusBAD] Pi-hole      [not installed]"
else
    echo "[$statusBAD] Pi-hole      [start failed]"
fi

if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusGOOD] DoH server   [working]"
elif [[ ! -f "/usr/local/bin/doh-server" ]]; then
    echo "[$statusBAD] DoH server   [not Installed]"
else
    echo "[$statusBAD] DoH server   [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2RAY        [working]"
elif [[ ! -d "/usr/local/bin/vtrui" ]]; then
    echo "[$statusBAD] V2RAY        [not Installed]"
else
    echo "[$statusBAD] V2RAY        [start failed]"
fi

if [[ $(systemctl is-active docker) = "active" ]]; then
    echo "[$statusGOOD] Docker       [working]"
elif [[ ! -f "/usr/bin/docker" ]]; then
    echo "[$statusBAD] Docker       [not installed]"
else
    echo "[$statusBAD] Docker       [start failed]"
fi

blue "-----------------------------------------------"
blue "Kernel ：$(uname -r)"
blue "Current tcp congestion control ：$(sysctl net.ipv4.tcp_congestion_control 2>/dev/null | cut -d' ' -f3) + $(sysctl net.core.default_qdisc 2>/dev/null | cut -d' ' -f3)"
blue "-----------------------------------------------"

    green "==========================="
    green "       SERVER"
    green "Recommend: Debian 10"
    green "Author:    JacyL4"
    green "==========================="
if [[ -f "/usr/local/bin/version.php" ]]; then
    blue  "Version:$(echo $(awk 'NR==1' /usr/local/bin/version.php))"
fi
    echo ""
    green  "1. Install de_GWD"
    green  "2. Install bbrplus+fq and reboot"
    green  "3. Install bbr+cake and reboot"
    red    "5. Change static IP"
    red    "6. Change domain and generate new certificate"
    red    "7. Change v2ray path & UUID"
    green  "8. Set v2ray upsteram"
    yellow "9. Update Pi-hole"
    yellow "0. Update de_GWD"
    green  "11.Print v2ray node information"
    red    "00.AutoUpdate turn on/off"
    red    "CTRL+C EXIT"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    installBBRplus
    start_menu
    ;;
    3)
    installBBR
    start_menu
    ;;
    5)
    changeStaticIP
    start_menu
    ;;
    6)
    changeDomain
    start_menu
    ;;
    7)
    changeV2rayVerify
    start_menu
    ;;
    8)
    changev2rayupstream
    start_menu
    ;;
    9)
    updatePihole
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    11)
    printNode
    start_menu
    ;;
    00)
    autoUpdateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu